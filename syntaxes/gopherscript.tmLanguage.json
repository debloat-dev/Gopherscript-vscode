{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Gopherscript",
	"patterns": [
		{
			"include": "#url-patterns"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#function-calls"
		},
		{
			"include": "#urls"
		},
		{
			"include": "#variables"
		},
		{
			"include": "#numbers"
		},
		{
			"include": "#constants"
		},
		{
			"include": "#comments"
		},
		{
			"include": "#http-host-patterns"
		},
		{
			"include": "#path-patterns"
		},
		{
			"include": "#paths"
		},
		{
			"include": "#regex"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#runes"
		},
		{
			"include": "#complex-patterns"
		},
		{
			"include": "#identifiers"
		},
		{
			"include": "#lists"
		},
		{
			"include": "#objects"
		}
	],
	"repository": {
		"variables": {
			"patterns": [
				{
					"name": "variable.name",
					"match": "[$][a-zA-Z-]*\\b"
				},
				{
					"name": "variable.name.global",
					"match": "[$][$][a-zA-Z-]*\\b"
				}
			]
		},
		"numbers": {
			"patterns": [
				{
					"match": "\\b0x[a-fA-F0-9]+",
					"name": "constant.numeric"
				},
				{
					"match": "[0-9][0-9e.]*[a-zA-Z]+(/[a-zA-Z]+\\b)?",
					"name": "constant.numeric"
				},
				{
					"match": "(?x) # turn on extended mode\n (?:\n    0       # a zero\n    |       # ...or...\n    [1-9]   # a 1-9 character\n    \\d*     # followed by zero or more digits\n  )\n  (?:\n    (?:\n      \\.    # a period\n      \\d+   # followed by one or more digits\n    )?\n    (?:\n      [eE]  # an e character\n      [+-]? # followed by an option +/-\n      \\d+   # followed by one or more digits\n    )?      # make exponent optional\n  )?        # make decimal portion optional",
					"name": "constant.numeric"
				}
			]
		},
		"constants": {
			"patterns": [
				{
					"name": "constant.language",
					"match": "\\b(nil|true|false)\\b"
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"begin": "#[ \t]",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment"
						}
					},
					"end": "\\n",
					"name": "comment.line"
				}
			]
		},
		"http-host-patterns": {
			"patterns": [
				{
					"name": "string.regexp",
					"match": "https?:\\/\\/\\*(\\.[-a-zA-Z0-9.*]*)?(:[0-9]{1,4})?"
				},
				{
					"name": "string.regexp",
					"match": "https?:\\/\\/([-a-zA-Z0-9.*]*)\\.\\*(:[0-9]{1,4})?"
				}
			]
		},
		"url-patterns": {
			"patterns": [
				{
					"name": "string.regexp.url-pattern",
					"match": "https://(?:localhost|(?:www\\.)?[-a-zA-Z0-9@:%._+~#=]{1,32}\\.[a-zA-Z0-9()]{1,6})\\b(?:[-a-zA-Z0-9@:%_+.~#?&//=]{0,100})/[.]{3}",
					"captures": {
						"1": {
							"patterns": [
								{
									"include": "#path-patterns"
								}
							]
						}
					}
				}
			]
		},
		"urls": {
			"patterns": [
				{
					"name": "string.interpolated.url-expression",
					"begin": "https://(?:localhost|(?:www\\.)?[-a-zA-Z0-9@:%._+~#=]{1,32}\\.[a-zA-Z0-9()]{1,6})(?=[-a-zA-Z0-9@:%_+.~#?&//=]*\\$)",
					"patterns": [
						{
							"match": "\\$[a-zA-Z0-9_-]+\\$",
							"captures": {
								"0": {
									"name": "variable.name"
								}
							}
						},
						{
							"match": "[-a-zA-Z0-9@:%_+.~#?&//=]+",
							"name": "string.unquoted.string-slice"
						}
					],
					"end": "(?=[\\s})\\],:;])"
				},
				{
					"name": "string.unquoted.url",
					"match": "https://(?:localhost|(?:www\\.)?[-a-zA-Z0-9@:%._+~#=]{1,32}\\.[a-zA-Z0-9()]{1,6})\\b(?:[-a-zA-Z0-9@:%_+.~#?&//=]{0,100})"
				}
			]
		},
		"path-patterns": {
			"patterns": [
				{
					"name": "string.regexp.path-pattern",
					"begin": "%\\.{0,2}/[-a-zA-Z0-9_+@/.]*(?=\\$)",
					"patterns": [
						{
							"match": "\\$[a-zA-Z0-9_-]+\\$",
							"captures": {
								"0": {
									"name": "variable.name"
								}
							}
						},
						{
							"match": "[-a-zA-Z0-9_+@/.]+",
							"name": "string.regexp.path-pattern-slice"
						}
					],
					"end": "(?=[\\s})\\],:;])"
				},
				{
					"name": "string.regexp.path-pattern",
					"match": "\\.{0,2}/([*?][-a-zA-Z0-9_+/:.]*|\\[[-a-zA-Z0-9_+/:.*?]+\\])([-a-zA-Z0-9_+/:.*?]+|\\[[-a-zA-Z0-9_+/:.*?]+\\])*"
				},
				{
					"name": "string.regexp.path-pattern",
					"match": "\\.{0,2}/([-a-zA-Z0-9_+/:.]+([*?]|\\[[-a-zA-Z0-9_+/:.*?]+\\]))+([-a-zA-Z0-9_+/:.*?]+|\\[[-a-zA-Z0-9_+/:.*?]+\\])*"
				},
				{
					"name": "string.regexp.path-pattern",
					"match": "\\.{0,2}/([.]{3}|[-a-zA-Z0-9_+/.]*/[.]{3})"
				},
				{
					"name": "string.regexp.path-pattern",
					"match": "%\\.{0,2}/[-a-zA-Z0-9_+/.]*"
				}
			]
		},
		"paths": {
			"patterns": [
				{
					"name": "string.interpolated.path-expression",
					"begin": "\\.{0,2}/[-a-zA-Z0-9_+@/.]*(?=\\$)",
					"patterns": [
						{
							"match": "\\$[a-zA-Z0-9_-]+\\$",
							"captures": {
								"0": {
									"name": "variable.name"
								}
							}
						},
						{
							"match": "[-a-zA-Z0-9_+@/.]+",
							"name": "string.unquoted.string-slice"
						}
					],
					"end": "(?=[\\s})\\],:;])"
				},
				{
					"name": "string.unquoted",
					"match": "\\.{0,2}/[-a-zA-Z0-9_+@/.]*"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.other",
					"match": "\\b(require|drop-perms|import|allow|as|const|assign)\\b"
				},
				{
					"name": "keyword.control.gopherscript",
					"match": "\\b(if|else|switch|match|for|in|return|break|continue|sr)\\b"
				},
				{
					"name": "storage.type",
					"match": "\\b(fn)\\b"
				}
			]
		},
		"regex": {
			"patterns": [
				{
					"name": "string.regexp.gopherscript",
					"begin": "%\"",
					"end": "\"",
					"patterns": [
						{
							"include": "#regexp"
						}
					]
				}
			]
		},
		"regexp": {
			"patterns": [
				{
					"name": "keyword.control.anchor.regexp",
					"match": "\\\\[bB]|\\^|\\$"
				},
				{
					"match": "\\\\[1-9]\\d*|\\\\k<([a-zA-Z_$][\\w$]*)>",
					"captures": {
						"0": {
							"name": "keyword.other.back-reference.regexp"
						},
						"1": {
							"name": "variable.other.regexp"
						}
					}
				},
				{
					"name": "keyword.operator.quantifier.regexp",
					"match": "[?+*]|\\{(\\d+,\\d+|\\d+,|,\\d+|\\d+)\\}\\??"
				},
				{
					"name": "keyword.operator.or.regexp",
					"match": "\\|"
				},
				{
					"name": "meta.group.assertion.regexp",
					"begin": "(\\()((\\?=)|(\\?!)|(\\?<=)|(\\?<!))",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.group.regexp"
						},
						"2": {
							"name": "punctuation.definition.group.assertion.regexp"
						},
						"3": {
							"name": "meta.assertion.look-ahead.regexp"
						},
						"4": {
							"name": "meta.assertion.negative-look-ahead.regexp"
						},
						"5": {
							"name": "meta.assertion.look-behind.regexp"
						},
						"6": {
							"name": "meta.assertion.negative-look-behind.regexp"
						}
					},
					"end": "(\\))",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.group.regexp"
						}
					},
					"patterns": [
						{
							"include": "#regexp"
						}
					]
				},
				{
					"name": "meta.group.regexp",
					"begin": "\\((?:(\\?:)|(?:\\?<([a-zA-Z_$][\\w$]*)>))?",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.group.regexp"
						},
						"1": {
							"name": "punctuation.definition.group.no-capture.regexp"
						},
						"2": {
							"name": "variable.other.regexp"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.group.regexp"
						}
					},
					"patterns": [
						{
							"include": "#regexp"
						}
					]
				},
				{
					"name": "constant.other.character-class.set.regexp",
					"begin": "(\\[)(\\^)?",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.character-class.regexp"
						},
						"2": {
							"name": "keyword.operator.negation.regexp"
						}
					},
					"end": "(\\])",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.character-class.regexp"
						}
					},
					"patterns": [
						{
							"name": "constant.other.character-class.range.regexp",
							"match": "(?:.|(\\\\(?:[0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}))|(\\\\c[A-Z])|(\\\\.))\\-(?:[^\\]\\\\]|(\\\\(?:[0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}))|(\\\\c[A-Z])|(\\\\.))",
							"captures": {
								"1": {
									"name": "constant.character.numeric.regexp"
								},
								"2": {
									"name": "constant.character.control.regexp"
								},
								"3": {
									"name": "constant.character.escape.backslash.regexp"
								},
								"4": {
									"name": "constant.character.numeric.regexp"
								},
								"5": {
									"name": "constant.character.control.regexp"
								},
								"6": {
									"name": "constant.character.escape.backslash.regexp"
								}
							}
						},
						{
							"include": "#regex-character-class"
						}
					]
				},
				{
					"include": "#regex-character-class"
				}
			]
		},
		"regex-character-class": {
			"patterns": [
				{
					"name": "constant.other.character-class.regexp",
					"match": "\\\\[wWsSdDtrnvf]|\\."
				},
				{
					"name": "constant.character.numeric.regexp",
					"match": "\\\\([0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4})"
				},
				{
					"name": "constant.character.control.regexp",
					"match": "\\\\c[A-Z]"
				},
				{
					"name": "constant.character.escape.backslash.regexp",
					"match": "\\\\."
				}
			]
		},
		"strings": {
			"begin": "\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.gopherscript"
				}
			},
			"end": "\"",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.gopherscript"
				}
			},
			"name": "string.quoted.double.gopherscript",
			"patterns": [
				{
					"include": "#stringcontent"
				}
			]
		},
		"stringcontent": {
			"patterns": [
				{
					"match": "(?x)                # turn on extended mode\n  \\\\                # a literal backslash\n  (?:               # ...followed by...\n    [\"\\\\/bfnrt]     # one of these characters\n    |               # ...or...\n    u               # a u\n    [0-9a-fA-F]{4}) # and four hex digits",
					"name": "constant.character.escape.json"
				},
				{
					"match": "\\\\.",
					"name": "invalid.illegal.unrecognized-string-escape.gopherscript"
				}
			]
		},
		"runes": {
			"patterns": [
				{
					"begin": "'",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin"
						}
					},
					"end": "'",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end"
						}
					},
					"name": "string.quoted.rune",
					"patterns": [
						{
							"match": "\\G(\\\\([0-7]{3}|[abfnrtv\\\\'\"])|.)(?=')",
							"name": "constant.other.rune.go"
						},
						{
							"match": "[^']+",
							"name": "invalid.illegal.unknown-rune"
						}
					]
				}
			]
		},
		"lists": {
			"begin": "\\[",
			"beginCaptures": {
				"0": {
					"name": "punctuation.begin.bracket"
				}
			},
			"end": "\\]",
			"endCaptures": {
				"0": {
					"name": "punctuation.end.bracket"
				}
			},
			"patterns": [
				{
					"include": "$self"
				}
			]
		},
		"objects": {
			"begin": "\\{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.begin.bracket.curly"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.end.bracket.curly"
				}
			},
			"patterns": [
				{
					"include": "$self"
				}
			]
		},
		"function-calls": {
			"patterns": [
				{
					"begin": "\\b([a-zA-Z][a-zA-Z0-9_-]*)(\\()",
					"beginCaptures": {
						"1": {
							"name": "entity.name.function"
						},
						"2": {
							"name": "punctuation.definition.begin.bracket.round"
						}
					},
					"patterns": [
						{
							"include": "$self"
						}
					],
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.end.bracket.round"
						}
					}
				},
				{
					"begin": "\\b([a-zA-Z][a-zA-Z0-9_-]*)(?=\")",
					"beginCaptures": {
						"1": {
							"name": "entity.name.type"
						}
					},
					"patterns": [
						{
							"include": "#strings"
						}
					],
					"end": "(?<=\")",
					"endCaptures": {}
				},
				{
					"begin": "\\b([a-zA-Z][a-zA-Z0-9_-]*\\$)",
					"beginCaptures": {
						"1": {
							"name": "entity.name.function"
						}
					},
					"patterns": [
						{
							"include": "$self"
						}
					],
					"end": "\n"
				},
				{
					"begin": "(?:^|\\|)[ \t]*([a-zA-Z_][a-zA-Z0-9_-]* [ \t]*)(?![=])",
					"beginCaptures": {
						"1": {
							"patterns": [
								{
									"match": "^ex\\b",
									"name": "constant.language"
								},
								{
									"include": "#keywords"
								},
								{
									"name": "entity.name.function",
									"match": ".*"
								}
							]
						}
					},
					"patterns": [
						{
							"include": "$self"
						}
					],
					"end": "\n"
				},
				{
					"begin": "(?:^|\\|)[ \t]*([a-zA-Z0-9_.-]+\\.)([a-zA-Z][a-zA-Z0-9_-]*)[ \t]+(?![=])",
					"beginCaptures": {
						"1": {
							"patterns": [
								{
									"include": "#keywords"
								},
								{
									"include": "#identifiers"
								}
							]
						},
						"2": {
							"name": "entity.name.function"
						}
					},
					"patterns": [
						{
							"include": "$self"
						}
					],
					"end": "\n"
				}
			]
		},
		"complex-patterns": {
			"patterns": [
				{
					"name": "entity.name.type",
					"match": "(?<!\\w)%[a-zA-Z][a-zA-Z0-9_-]*\\b"
				}
			]
		},
		"identifiers": {
			"patterns": [
				{
					"name": "variable.other",
					"match": "[a-zA-Z][a-zA-Z0-9_-]*\\b"
				}
			]
		}
	},
	"scopeName": "source.gopherscript"
}